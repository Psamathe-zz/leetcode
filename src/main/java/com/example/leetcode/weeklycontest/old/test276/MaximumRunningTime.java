package com.example.leetcode.weeklycontest.old.test276;

import java.util.*;

/**
 * You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.
 *
 * Initially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.
 *
 * Note that the batteries cannot be recharged.
 *
 * Return the maximum number of minutes you can run all the n computers simultaneously.
 *
 *
 *
 * Example 1:
 *
 *
 * Input: n = 2, batteries = [3,3,3]
 * Output: 4
 * Explanation:
 * Initially, insert battery 0 into the first computer and battery 1 into the second computer.
 * After two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.
 * At the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.
 * By the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.
 * We can run the two computers simultaneously for at most 4 minutes, so we return 4.
 *
 * Example 2:
 *
 *
 * Input: n = 2, batteries = [1,1,1,1]
 * Output: 2
 * Explanation:
 * Initially, insert battery 0 into the first computer and battery 2 into the second computer.
 * After one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer.
 * After another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.
 * We can run the two computers simultaneously for at most 2 minutes, so we return 2.
 * 401
 * [6887,3660,140,4602,7928,8668,5449,3075,2120,180,1376,1359,9464,9205,2261,7642,5799,7076,2968,2618,6792,1294,7620,7429,9929,5253,9784,9388,5382,6731,3635,3301,8622,1036,7223,5963,2283,9226,1691,2703,8205,6716,5570,9493,6121,5810,673,4884,1509,9445,6287,4165,240,8028,2161,7891,2101,1990,8257,9796,4071,7876,911,2738,4910,6182,7807,7434,8486,8437,711,275,7865,1411,1228,751,1626,3063,4051,730,5900,1522,1425,8368,8479,3154,3557,2119,2987,2070,5284,9567,841,3217,7026,1219,3728,2677,8997,3318,8680,8126,9154,2299,1295,5688,5192,4875,3079,6004,2873,6,1773,9607,3059,5931,3644,9363,6679,509,9943,9336,4052,9877,4259,6881,7438,6600,6178,4426,3432,5997,5724,1028,3954,7614,2865,8402,6118,8292,888,3384,9716,8317,2930,5398,6030,9872,471,5504,6894,6466,8298,3589,2352,2039,2248,2441,169,3392,366,9950,6304,5020,3912,4030,395,8679,1929,6191,3709,2325,21,5656,2212,5243,7121,7766,5674,4309,1083,2635,2737,293,4882,6479,4601,7861,5385,561,1324,955,1814,9761,6077,1118,2959,4966,1576,65,1048,7888,1426,4682,6013,672,5003,8661,4042,4991,2333,7608,521,7186,1734,4489,1985,6033,5155,4259,7591,3354,3298,7991,9374,5194,8845,8340,783,3516,3151,8352,2930,1578,5292,6872,7044,2714,4066,7080,8282,8019,4935,9900,9286,2325,5231,381,6916,27,2132,5119,3222,3706,8324,1229,1412,518,9557,9090,9336,7488,1274,3692,5501,1713,8589,1434,8485,6762,9320,9312,5793,7569,174,4497,9231,7057,3672,752,8866,4246,6575,3405,4818,2546,1621,6713,675,3801,5815,8167,2796,9897,9321,5359,6501,6617,6999,4020,9265,4075,3065,2883,3972,7553,4638,8441,6505,3919,5435,6875,6651,6857,6350,565,6531,289,591,3929,8066,2257,6985,3369,1390,8351,6432,2632,1934,857,5886,4395,6502,9988,9234,7479,2778,4480,6377,7633,4589,4242,3467,7921,5166,1149,1297,4050,3556,6334,904,218,2693,6944,3116,5217,6061,4789,1654,6997,4163,7115,6208,4274,2932,3203,9503,5596,5234,2907,52,9486,4622,2043,233,8292,105,9779,4549,6329,8913,9586,5794,2010,5082,156,9441,5105,962,596,4722,670,735,3515,1731,4508,356,2912,7820,2508,6339,6696,6129,4737,8797,7455,8779,3315,8359,9397,1653,5735,4441,1022,7473,4352,1009,4567,9758,8095,2588,9890,7128,2012,1736,6343,2874,3649,3804,9591,7627,6546,2865,6777,5819,7653,5074,2230,1431,8572,7433,2367,1462,7607,7683,1527,7457,6828,696,5867,9492,7606,6661,2065,690,7436,1811,9927,20,3814,351,1180,1904,2550,6038,3029,7780,811,1789,7910,7663,8238,3938,4812,428,8867,2616,1602,5148,141,7847,8413,8524,3441,878,9317,4453,9902,3209,8046,2552,4090,5456,3373,9838,2184,6663,5527,1023,4,1091,9832,6107,9608,7687,540,822,6508,255,4499,4702,6895,2174,5727,202,3618,6402,362,6180,2063,7790,8611,642,8115,2424,1358,244,810,7019,2854,2220,7972,6112,7679,1127,8188,2034,4685,4637,350,2337,7126,2166,9211,3700,9095,795,6578,3267,4129,4066,194,1917,7852,5030,9785,8328,8977,8587,7129,2709,7828,2115,9049,2324,3064,3463,7262,7336,5230,7568,6255,8396,7380,4567,9395,2248,4448,9104,3294,5029,3028,2535,2152,1291,2300,4778,242,9290,1011,6599,6020,1235,720,1725,73,2655,5132,978,4089,4695,5586,967,930,5250,6243,3769,2619,8985,5182,6948,7104,787,4318,6575,1437,1870,4018,6137,1421,5592,7838,4023,1213,3161,7899,7671,7015,8613,4592,5976,3143,6862,8487,3106,188,1529,8618,7191,6695,2611,8139,3561,6890,307,7877,552,9135,1368,2646,1743,5514,9675,3152,3019,9936,4075,5768,412,2621,3570,9531,5941,8013,4381,394,4311,1821,7858,9696,9765,8267,4262,3650,6956,5516,2860,1252,3773,5882,8426,3811,9573,3166,8845,1252,3049,6355,6136,2988,6784,6344,8290,9038,8857,90,9105,2352,1187,6463,5141,9571,3589,2589,9004,166,3672,3264,5359,4605,9699,8161,6628,4873,9020,7264,7446,1070,6678,5105,9945,4917,6966,6319,336,585,6481,4803,9162,1478,1040,7230,8323,7561,2654,6790,2632,6452,6562,3898,3467,1093,1345,8997,8748,6311,4408,5760,1806,8466,3393,8947,4265,8291,1825]
 *
 *
 *
 * Constraints:
 */
public class MaximumRunningTime {
    public static void main(String[] args) {

    }

    /**
     * https://leetcode-cn.com/problems/maximum-running-time-of-n-computers/solution/java-tan-xin-by-feilue-hvjw/
     * @param n
     * @param batteries
     * @return
     */
    public long maxRunTime(int n, int[] batteries) {
        Arrays.sort(batteries);
        long sum = 0;
        for(int i : batteries)
            sum += i;
        for(int i = batteries.length - 1; i >= 0; i--){
            if(batteries[i] > sum / n){
                n--;
                sum -= batteries[i];
            }else
                return sum / n;
        }
        return 0;
    }
}
